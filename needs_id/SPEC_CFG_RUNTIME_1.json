{"created": "2025-10-20T16:58:08.861829", "current_version": "", "project": "ESP32 Template", "versions": {"": {"created": "2025-10-20T16:58:08.861813", "creator": {"program": "sphinx_needs", "version": "6.0.1"}, "needs": {"SPEC_CFG_RUNTIME_1": {"acceptance_criteria": "", "arch": {}, "avatar": "", "closed_at": "", "completion": null, "constraints": [], "constraints_error": null, "constraints_passed": true, "constraints_results": {}, "content": "**Description:** Runtime configuration structure holds actively used parameters in RAM for fast access.\n\n**Current Implementation (Template Scope):**\n\nThe template currently uses configuration for **WiFi credentials only**:\n\n.. code-block:: c\n\n   typedef struct {\n       // WiFi Credentials (Required for network connectivity)\n       char wifi_ssid[33];           // WiFi network name (IEEE 802.11 max 32 chars)\n       char wifi_password[65];       // WiFi password (WPA max 64 chars)\n\n       // Metadata\n       uint32_t config_version;      // Schema version for compatibility\n       uint32_t save_count;          // Number of saves (statistics)\n\n   } system_config_t;\n\n**WiFi Module Configuration:**\n\nOther WiFi parameters (AP channel, max connections, STA retries, timeouts) are configured in the WiFi module header file (`main/components/web_server/wifi_manager.h`):\n\n.. code-block:: c\n\n   // In wifi_manager.h - compile-time defaults\n   #define WIFI_AP_CHANNEL           6\n   #define WIFI_AP_MAX_CONN          4\n   #define WIFI_STA_MAX_RETRY        5\n   #define WIFI_STA_TIMEOUT_MS       10000\n\n**Storage Philosophy:**\n\n- **NVS Storage** (Runtime configuration): Only user-configurable WiFi credentials (SSID, password)\n- **Compile-Time Headers**: All hardware defaults and WiFi parameters defined in component headers\n- **Rationale**: Minimizes NVS usage, keeps configuration truly minimal and focused\n\n**Application-Specific Parameters:**\n\nWhen forking the template for your project, define application parameters in your component headers, not in NVS:\n\n.. code-block:: c\n\n   // In my_component/include/my_component.h (NOT in system_config_t)\n   #define SENSOR_RANGE_MIN_MM        50\n   #define SENSOR_RANGE_MAX_MM        400\n   #define LED_COUNT                  30\n   #define LED_BRIGHTNESS_DEFAULT     200\n   #define MEASUREMENT_INTERVAL_MS    100\n\nIf you need runtime-configurable application parameters (rare), extend `system_config_t` **only for those specific parameters**, not for every possible setting.\n\n**Design Guidelines for Extensions:**\n\n1. **Keep WiFi settings in NVS** - Required for user configuration\n2. **Define hardware parameters in headers** - Reduces NVS bloat\n3. **Only add to NVS if truly dynamic** - User needs to change it after deployment\n4. **Use #define for constants** - Compile-time optimization\n5. **Increment config_version** - Only if you add runtime-configurable parameters to struct\n\n**Reset Requirement After Parameter Changes:**\n\n\u26a0\ufe0f **Important**: Configuration changes only take effect after system reset.\n\n- Changes written to runtime config are visible immediately (for API feedback)\n- Changes persisted to NVS via ``config_save_to_nvs()`` trigger automatic reset\n- Reset ensures all components see new configuration on boot\n- Dynamic reconfiguration is not supported (complexity not justified for IoT devices)\n\n**Design Rationale:** Reset-after-save prevents inconsistent state where some components use old config while others use new. Simpler than hot-reloading configuration.\n\n**Type Conversion Strategy:**\n\n- **NVS Storage**: Use fixed-width integers (uint8_t, uint16_t, uint32_t)\n- **Runtime Use**: Convert to application-friendly types as needed\n- **Example**: Store channel as uint8_t, validate as 1-13 in setter\n\n**Performance Characteristics:**\n\n- Setter Validation: <1ms (length check, range validation)\n- Full Validation: <5ms (all parameters checked)\n- NVS Write: <50ms, then reset within 2 seconds\n- Memory Overhead: Structure size < 128 bytes (typical)", "created_at": "", "docname": "12_design/config-manager", "doctype": ".rst", "duration": null, "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "SPEC_CFG_RUNTIME_1", "id_prefix": "", "is_external": false, "is_import": false, "is_modified": false, "jinja_content": false, "layout": null, "lineno": 106, "links": ["REQ_CFG_3"], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": null, "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_content": null, "post_template": null, "pre_content": null, "pre_template": null, "prefix": "", "priority": "", "query": "", "rationale": "", "section_name": "Data Structure Design", "sections": ["Data Structure Design", "Configuration Manager Design Specification"], "service": "", "signature": null, "specific": "", "status": "approved", "style": null, "tags": ["data-structure", "runtime"], "template": null, "title": "Runtime Configuration Structure", "type": "spec", "type_name": "Design Specification", "updated_at": "", "url": "", "url_postfix": "", "user": ""}}, "needs_amount": 1}}}